name: mainMetodologyService
services:
  mainmetodology-api:
    container_name: mainmetodology-api
    build:
      context: ../../
      dockerfile: MethodologyMain.API/Dockerfile
    ports:
      - "80:5002"
    networks:
      - hackNet
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://+:5002"
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: password
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hackNet
    restart: unless-stopped

  postgres:
    container_name: main_db
    image: postgres:latest
    volumes: 
      - ../../MethodologyMain.Persistence/postgres-data:/var/lib/postgresql/data    
    environment:
      POSTGRES_DB: maindb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d maindb"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - hackNet
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    volumes: 
        - ./rabbit-data:/var/lib/rabbitmq   
    restart: always
    ports:
        - 5672:5672
        - 15672:15672
        - 15692:15692
    networks:
        - authNet
        - hackNet
        - logNet
        - mailNet
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
        - "3000:3000"
    environment:
        - GF_SECURITY_ADMIN_USER=admin
        - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
        - ./grafana-data:/var/lib/grafana
        - ./Configs/grafana.ini:/etc/grafana/grafana.ini
    depends_on: 
      prometheus:
        condition: service_started
    networks:
        - logNet
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./Configs/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - ./Configs/alert_rules.yml:/etc/prometheus/alert_rules.yml
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yaml
    ports:
      - 9090:9090
    restart: unless-stopped
    networks:
      - hackNet
      - logNet

  redis:
    container_name: redis
    image: redis
    restart: always
    volumes: 
      - ./redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - hackNet
      - authNet

networks:
  authNet:
    name: authNet
    driver: bridge
    external: true
  hackNet:
    name: hackNet
    driver: bridge
    external: true
  logNet:
    name: logNet
    driver: bridge
    external: true
  mailNet:
    name: mailNet
    driver: bridge
    external: true