// <auto-generated />
using System;
using MethodTeams.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MethodologyMain.Persistence.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MethodologyMain.Logic.Entities.HackathonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("additionalInfo");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("endDate");

                    b.Property<int>("MaxTeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("maxTeamSize");

                    b.Property<int>("MinTeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("minTeamSize");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organizationId");

                    b.Property<decimal>("Prize")
                        .HasColumnType("numeric")
                        .HasColumnName("prize");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startDate");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("hackathon", "mainSchema");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.HackathonTagEntity", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tagId");

                    b.Property<Guid>("HackathonId")
                        .HasColumnType("uuid")
                        .HasColumnName("hackathonId");

                    b.HasKey("TagId", "HackathonId");

                    b.HasIndex("HackathonId");

                    b.ToTable("hackthonTag");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.OrganizationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("LinkToWebSite")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("linkToWebsite");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("organization", "mainSchema");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.TagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("TagClassName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tagClassName");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tagName");

                    b.HasKey("Id");

                    b.ToTable("tag", "mainSchema");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CaptainId")
                        .HasColumnType("uuid")
                        .HasColumnName("captainId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("HackathonId")
                        .HasColumnType("uuid")
                        .HasColumnName("hackathonId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("TeamCreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("teamCreatedAt");

                    b.HasKey("Id");

                    b.HasIndex("HackathonId");

                    b.ToTable("team", "mainSchema");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.TrackEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("HackathonId")
                        .HasColumnType("uuid")
                        .HasColumnName("hackathonId");

                    b.Property<string>("TrackAdditionalInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("trackAdditionalInfo");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("trackName");

                    b.HasKey("Id");

                    b.HasIndex("HackathonId");

                    b.ToTable("track", "mainSchema");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.UserMainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthDate");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("education");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastName");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("middleName");

                    b.Property<string>("Telegram")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Telegram");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userName");

                    b.HasKey("Id");

                    b.ToTable("teamMember", "mainSchema");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.UserTagEntity", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tagId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("TagId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("userTag", "mainSchema");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.UserTeamEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("teamId");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joinedAt");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("userTeam", "mainSchema");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.HackathonEntity", b =>
                {
                    b.HasOne("MethodologyMain.Logic.Entities.OrganizationEntity", "Organization")
                        .WithMany("Hackathons")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.HackathonTagEntity", b =>
                {
                    b.HasOne("MethodologyMain.Logic.Entities.HackathonEntity", "Hackathon")
                        .WithMany("Tags")
                        .HasForeignKey("HackathonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MethodologyMain.Logic.Entities.TagEntity", "Tag")
                        .WithMany("Hacksthons")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hackathon");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.TeamEntity", b =>
                {
                    b.HasOne("MethodologyMain.Logic.Entities.HackathonEntity", "Hackathon")
                        .WithMany("Teams")
                        .HasForeignKey("HackathonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hackathon");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.TrackEntity", b =>
                {
                    b.HasOne("MethodologyMain.Logic.Entities.HackathonEntity", "Hackathon")
                        .WithMany("Tracks")
                        .HasForeignKey("HackathonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hackathon");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.UserTagEntity", b =>
                {
                    b.HasOne("MethodologyMain.Logic.Entities.TagEntity", "Tag")
                        .WithMany("Users")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MethodologyMain.Logic.Entities.UserMainEntity", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.UserTeamEntity", b =>
                {
                    b.HasOne("MethodologyMain.Logic.Entities.TeamEntity", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MethodologyMain.Logic.Entities.UserMainEntity", "User")
                        .WithMany("Teams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.HackathonEntity", b =>
                {
                    b.Navigation("Tags");

                    b.Navigation("Teams");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.OrganizationEntity", b =>
                {
                    b.Navigation("Hackathons");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.TagEntity", b =>
                {
                    b.Navigation("Hacksthons");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.TeamEntity", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("MethodologyMain.Logic.Entities.UserMainEntity", b =>
                {
                    b.Navigation("Tags");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
